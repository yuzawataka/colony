#!/usr/bin/env python
#
# Copyright 2013 National Institute of Informatics.
#
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from argparse import ArgumentParser
from ConfigParser import ConfigParser, NoOptionError, NoSectionError
import os
from swift_ring_sync import RingSync, RingSyncError
from swift_ring_sync.utils import *
import sys


def main(argv):
    opts = ArgumentParser()
    opts.add_argument('config_file')
    args = opts.parse_args()

    try:
        conf = ConfigParser()
        conf.read(args.config_file)
    except Exception, msg:
        print 'Config file read failed: [%s]' % msg
        sys.exit(1)

    def _conf(name, default):
        try:
            return conf.get('ring-sync', name, default)
        except NoOptionError:
            return ''
        except NoSectionError:
            return ''

    def _bool(val):
        return val.lower() in set(('true', '1', 'yes', 'on', 't', 'y'))

    internal = _bool(_conf('use_internal', 'yes'))
    container = _conf('container_name', 'rings')
    ring_dir = _conf('ring_dir', '/etc/swift')
    ring_backup_dir = _conf('ring_backup_dir', '/etc/swift/backeup')
    auth_url = _conf('auth_url', '')
    identity = _conf('identity', '')
    password = _conf('password', '')
    account_id = _conf('account_id', '')
    max_backup = int(_conf('max_backup', 8))
    log = _conf('log', '')
    rings = 'account.ring.gz container.ring.gz object.ring.gz'
    rings = _conf('rings', rings).split()

    os.environ['srs_container'] = container
    os.environ['srs_ring_dir'] = ring_dir
    os.environ['srs_ring_backup_dir'] = ring_backup_dir
    os.environ['srs_auth_url'] = auth_url
    os.environ['srs_identity'] = identity
    os.environ['srs_password'] = password
    os.environ['srs_account_id'] = account_id
    os.environ['srs_max_backup'] = str(max_backup)
    os.environ['srs_rings'] = ' '.join(rings)

    cmd_pre_sync = _conf('hook_command_pre_sync', '')
    cmd_sync_success = _conf('hook_command_sync_success', '')
    cmd_sync_failure = _conf('hook_command_sync_failure', '')
    cmd_post_sync = _conf('hook_command_post_sync', '')
    cmd_pre_sync_cont_fail = \
        _bool(_conf('hook_command_pre_sync_continue_on_fail', 'no'))
    cmd_sync_success_cont_fail = \
        _bool(_conf('hook_command_sync_success_continue_on_fail', 'no'))
    cmd_sync_failure_cont_fail = \
        _bool(_conf('hook_command_sync_failure_continue_on_fail', 'no'))
    cmd_post_sync_cont_fail = \
        _bool(_conf('hook_command_post_sync_continue_on_fail', 'no'))

    logger = log_init(log, 'info')

    # command hook before sync start
    exec_hook_cmd(cmd_pre_sync, 'pre sync', cmd_pre_sync_cont_fail, logger)

    rc = 0
    try:
        if internal:
            rs = RingSync(account_id, internal=True)
        else:
            rs = RingSync(identity, auth_url=auth_url, password=password,
                          internal=False)
    except RingSyncError, msg:
        p(msg, lv='warn', logger=logger)
        rc = 1
        sys.exit(rc)

    results = []
    for ring in rings:
        try:
            temp_ring = rs.get_rings(ring, ring_dir=ring_dir)
            if not temp_ring:
                p('%s is already up-to-date.' % ring, logger=logger)
            else:
                rs.update_ring_file(temp_ring, ring, ring_dir=ring_dir,
                                    ring_backup_dir=ring_backup_dir,
                                    max_backup=max_backup, dir_create=True)
                p('%s update is succeed.' % ring, logger=logger)
        except RingSyncError, msg:
            p('%s update is failed. [%s]' % (ring, msg), logger=logger,
               lv='warn')
            rc = 1
            results.append(False)

    # command hook when sync success or fail.
    if False not in results:
        exec_hook_cmd(cmd_sync_success, 'sync succeed',
                      cmd_sync_success_cont_fail, logger)
    else:
        rc = 1
        exec_hook_cmd(cmd_sync_failure, 'sync failed',
                      cmd_sync_failure_cont_fail, logger)

    # command hook after sync
    exec_hook_cmd(cmd_post_sync, 'post sync', cmd_post_sync_cont_fail, logger)
    sys.exit(rc)

if __name__ == '__main__':
    main(sys.argv)

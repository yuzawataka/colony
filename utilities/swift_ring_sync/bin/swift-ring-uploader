#!/usr/bin/env python
#
# Copyright 2013 National Institute of Informatics.
#
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from argparse import ArgumentParser
from ConfigParser import ConfigParser, NoOptionError, NoSectionError
from swift_ring_sync import RingSync, RingSyncError
from swift_ring_sync.utils import *
from os.path import join
import sys


def main(argv):
    opts = ArgumentParser()
    opts.add_argument('config_file')
    args = opts.parse_args()

    try:
        conf = ConfigParser()
        conf.read(args.config_file)
    except Exception, msg:
        print 'Config file read failed: [%s]' % msg
        sys.exit(1)

    def _conf(name, default):
        try:
            return conf.get('ring-uploader', name, default)
        except NoOptionError:
            return ''
        except NoSectionError:
            return ''

    def _bool(val):
        return val.lower() in set(('true', '1', 'yes', 'on', 't', 'y'))

    internal = _bool(_conf('use_internal', 'yes'))
    container = _conf('container_name', 'rings')
    ring_dir = _conf('ring_dir', '/etc/swift')
    auth_url = _conf('auth_url', '')
    identity = _conf('identity', '')
    password = _conf('password', '')
    account_id = _conf('account_id', '')
    log = _conf('log', '')
    rings = 'account.ring.gz container.ring.gz object.ring.gz'
    rings = _conf('rings', rings).split()

    cmd_pre_upload = _conf('hook_command_pre_upload', '')
    cmd_upload_success = _conf('hook_command_upload_success', '')
    cmd_upload_failure = _conf('hook_command_upload_failure', '')
    cmd_post_upload = _conf('hook_command_post_upload', '')
    cmd_pre_upload_cont_fail = \
        _bool(_conf('hook_command_pre_upload_continue_on_fail', 'no'))
    cmd_upload_success_cont_fail = \
        _bool(_conf('hook_command_upload_success_continue_on_fail', 'no'))
    cmd_upload_failure_cont_fail = \
        _bool(_conf('hook_command_upload_failure_continue_on_fail', 'no'))
    cmd_post_upload_cont_fail = \
        _bool(_conf('hook_command_post_upload_continue_on_fail', 'no'))

    logger = log_init(log, 'info')

    # command hook before upload start
    exec_hook_cmd(cmd_pre_upload, 'pre upload',
                  cmd_pre_upload_cont_fail, logger)

    rc = 0
    try:
        if internal:
            rs = RingSync(account_id, internal=True)
        else:
            rs = RingSync(identity, auth_url=auth_url, password=password,
                          internal=False)
    except RingSyncError, msg:
        p(msg, lv='warn', logger=logger)
        rc = 1
        sys.exit(rc)

    results = []
    for ring in rings:
        try:
            if not rs.put_rings(join(ring_dir, ring)):
                p('%s is already up-to-date.' % ring, logger=logger)
            else:
                p('%s upload is succeed.' % ring, logger=logger)
        except RingSyncError, msg:
            p('%s upload is failed. [%s]' % (ring, msg), logger=logger,
              lv='warn')
            rc = 1
            results.append(False)

    # command hook when upload success or fail.
    if False not in results:
        exec_hook_cmd(cmd_upload_success, 'upload succeed',
                      cmd_upload_success_cont_fail, logger)
    else:
        rc = 1
        exec_hook_cmd(cmd_upload_failure, 'upload failed',
                      cmd_upload_failure_cont_fail, logger)

    # command hook after upload
    exec_hook_cmd(cmd_post_upload, 'post upload',
                  cmd_post_upload_cont_fail, logger)
    sys.exit(rc)

if __name__ == '__main__':
    main(sys.argv)
